#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('backend:server');
var http = require('http');
var db = require('../db')


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */
var URL = "mongodb+srv://dbadmin:adminofthedatabase@mycluster-ehlz4.mongodb.net/resdb?retryWrites=true&w=majority"
// var URL = "mongodb://localhost:27017"
db.connect(URL, function(err) {
  if (err) {
    console.log('Unable to connect to Mongo.')
    process.exit(1)
  } else {
    server.listen(port);
    server.on('error', onError);
    server.on('listening', onListening);
  }
})


/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  startAllPaidListener()
}

function startAllPaidListener() {
  stream = db.get().collection('sessions').watch({ fullDocument: 'updateLookup' })
  stream.on('change', function(doc) {
    if (doc.fullDocument) {
    db.get().collection('tables').findOne({
      restaurantId: doc.fullDocument.restaurantId,
      _id: doc.fullDocument.tableId,
    }, function(err, result) {
      if (doc.fullDocument.paid == result.people.length) {
        itemMap = doc.fullDocument.itemMap;
        console.log("ITEM MAP")
        console.log(itemMap)
        countMap = {}
        Object.keys(itemMap).forEach(function(person) {
          itemMap[person].forEach(function(item){
            if (countMap[item.name] == null) {
              countMap[item.name] = 1
            } else {
              countMap[item.name] += 1
            }
          })
        })

        oweMap = {}
        Object.keys(itemMap).forEach(function(person) {
          oweMap[person] = 0
          itemMap[person].forEach(function(item) {
            oweMap[person] += (item.price / countMap[item.name])
          })
        })
        db.get().collection('ledgers').insertOne({
          oweMap: oweMap,
          tableId: doc.fullDocument.tableId,
          restaurantId: doc.fullDocument.restaurantId,
          sessionId: doc.fullDocument._id
        }, function(err, result) { })
      }
    })
  }
  })
}